package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	"fmt"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/S-uraj/go-orders-graphql-api/graph/model"
	"github.com/google/uuid"
)

// CreatePost is the resolver for the CreatePost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	post := &model.Post{
		Title:       input.Title,
		Content:     input.Content,
		Author:      *input.Author,
		Hero:        *input.Hero,
		PublishedAt: time.Now().Format("29-03-2023"),
		UpdatedAt:   time.Now().Format("29-03-2023"),
	}
	if err := r.Database.Create(post).Error; err != nil {
		return nil, err
	}
	return post, nil
}

// UpdatePost is the resolver for the UpdatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, postID int, input *model.NewPost) (*model.Post, error) {
	Updatepost := model.Post{
		Title:     input.Title,
		Content:   input.Content,
		UpdatedAt: time.Now().Format("29-03-2023"),
	}

	GetPost := r.Database.Preload("Comments").First(&Updatepost, postID)
	if GetPost.Error != nil {
		fmt.Println(GetPost.Error)
		return nil, GetPost.Error
	}

	if err := r.Database.Model(&model.Post{}).Where("id=?", postID).Updates(&Updatepost).Error; err != nil {
		fmt.Println(err)
		return nil, err
	}

	Updatepost.ID = postID
	return &Updatepost, nil
}

// CreateComment is the resolver for the CreateComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewComment) (*model.Comment, error) {
	commentID := uuid.New().String()

	// create a new Comment object
	comment := &model.Comment{
		ID:          commentID,
		PostID:      input.PostID,
		Description: input.Description,
	}

	// save the new comment to the database
	err := r.Database.Create(comment).Error
	if err != nil {
		return nil, err
	}

	// update the Post object to include the new Comment
	var post model.Post
	err = r.Database.Where("id = ?", input.PostID).First(&post).Error
	if err != nil {
		return nil, err
	}
	post.Comments = append(post.Comments, comment)

	// save the updated Post to the database
	err = r.Database.Save(&post).Error
	if err != nil {
		return nil, err
	}

	return comment, nil
}

// GetAllPosts is the resolver for the GetAllPosts field.
func (r *queryResolver) GetAllPosts(ctx context.Context) ([]*model.Post, error) {
	posts := []*model.Post{}
	// Eager-load the associated comments for each post
	query := r.Database.Preload("Comments")

	// Find all posts and their associated comments
	if err := query.Find(&posts).Error; err != nil {
		fmt.Println(err)
		return nil, err
	}

	return posts, nil
}

// GetOnePost is the resolver for the GetOnePost field.
func (r *queryResolver) GetOnePost(ctx context.Context, id int) (*model.Post, error) {
	post := &model.Post{}
	// Finder method
	GetPost := r.Database.Preload("Comments").First(&post, id)
	if GetPost.Error != nil {
		fmt.Println(GetPost.Error)
		return nil, GetPost.Error
	}
	return post, nil
}

// GetComments is the resolver for the GetComments field.
func (r *queryResolver) GetComments(ctx context.Context) ([]*model.Comment, error) {
	panic(fmt.Errorf("not implemented: GetComments - GetComments"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
